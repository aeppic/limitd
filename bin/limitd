#!/usr/bin/env node

process.title = 'limitd server';

const config = require('../conf');
const yaml = require('js-yaml');

const agent = require('../lib/agent');
const logger = agent.logger;
const metrics = agent.metrics;
const Configurator = require('../lib/configurator');

const LimitdServer = require('../server');
const server = new LimitdServer(config);

server.start();

server.on('started', () => {
  if (config.configurator) {
    config.configurator.metrics = metrics;
    config.configurator.logger = logger;
    config.configurator.currentVal = config.buckets;
    const configurator = new Configurator(config.configurator);
    configurator.on('changed', (data) => {
      try {
        data = yaml.load(data);
      } catch(err) {
        return logger.error('invalid configuration', err);
      }
      if (data.buckets == null) {
        return logger.error('missing bucket configuration');
      }
      const start = Date.now();
      server.updateBucketConfig(data.buckets);
      logger.info('updated bucket configuration', { took: Date.now() - start });
    });
  }
});

function finish () {
  server.stop((err) => {
    process.exit(err ? 1 : 0);
  });
}

process
  .on('SIGTERM', finish)
  .on('SIGINT', finish)
  .on('uncaughtException', (err) => {
    logger.error(err);
    finish();
  });
